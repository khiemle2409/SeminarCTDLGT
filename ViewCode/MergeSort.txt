void Merge(int a[], int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int *LeftArr = new int[n1];
    int *RightArr = new int[n2];

    for (int i = 0; i < n1; i++)
        LeftArr[i] = a[left + i];
    for (int i = 0; i < n2; i++)
        RightArr[i] = a[mid + 1 + i];

    int i = 0, j = 0, current = left;
    while (i < n1 && j < n2)
        if (LeftArr[i] <= RightArr[j])
            a[current++] = LeftArr[i++];
        else
            a[current++] = RightArr[j++];

    while (i < n1)
        a[current++] = LeftArr[i++];

    while (j < n2)
        a[current++] = RightArr[j++];

    delete[] LeftArr, RightArr;
}

void MergeSort(int a[], int left, int right)
{
    if (left < right)
    {
        int mid = (left + right) / 2;

        MergeSort(a, left, mid);
        MergeSort(a, mid + 1, right);

        Merge(a, left, mid, right);
    }
}